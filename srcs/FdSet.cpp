/*
********************************************************************************
**____________________________________________________________________________**
**_____/\/\/\/\/\___/\/\____________/\/\/\/\/\/\_/\/\__/\/\__/\/\_____________**
**____/\/\____/\/\_______/\/\__/\/\____/\/\___________/\/\__/\/\__/\/\/\/\/\__**
**___/\/\/\/\/\___/\/\____/\/\/\______/\/\_____/\/\__/\/\__/\/\______/\/\_____**
**__/\/\_________/\/\____/\/\/\______/\/\_____/\/\__/\/\__/\/\____/\/\________**
**_/\/\_________/\/\__/\/\__/\/\____/\/\_____/\/\__/\/\__/\/\__/\/\/\/\/\_____**
**____________________________________________________________________________**
**                                                                            **
**----- Author --------------{ PixTillz }-------------------------------------**
**----- File ----------------{ FdSet.cpp }------------------------------------**
**----- Created -------------{ 2021-05-04 19:44:33 }--------------------------**
**----- Updated -------------{ 2021-08-13 15:51:29 }--------------------------**
********************************************************************************
*/

#include "../incs/FdSet.hpp"

// ########################################
// 					PUBLIC
// ########################################

// ____________Canonical Form____________
FdSet::~FdSet(void) { return; }
FdSet::FdSet(void) {
	FD_ZERO(&(this->_fds));
	return;
}
FdSet::FdSet(FdSet const &src) : _fds(src.getFds()) { return; }
FdSet		&FdSet::operator=(FdSet const &src) {
	this->setFds(src.getFds());
	return *this;
}

// ____________Setter / Getter___________
// _fds
fd_set		const &FdSet::getFds(void) const { return this->_fds; }
void		FdSet::setFds(fd_set const &src) {
	FD_ZERO(&(this->_fds));
	FD_COPY(&src, &(this->_fds));
}

// __________Member functions____________
fd_set		*FdSet::getPtr(void){ return &(this->_fds); }
void		FdSet::addFd(int const &fd) { FD_SET(fd, &(this->_fds)); }
void		FdSet::removeFd(int const &fd) { FD_CLR(fd, &(this->_fds)); }
void		FdSet::zeroFd(void) { FD_ZERO(&(this->_fds)); }
bool		FdSet::checkFd(int const &fd) const {
	return FD_ISSET(fd, &(this->_fds));
}

// ########################################
// 				   PRIVATE
// ########################################

// ########################################
// 				 EXECEPTIONS
// ########################################

// ########################################
// 					DEBUG
// ########################################

std::ostream &operator<<(std::ostream &flux, FdSet const &src) {
	for (int i = 0; i < 50; i++)
	{
		if (src.checkFd(i))
			flux << "[" << i << "] ";
	}
	return flux;
}
